import{_ as o,c as t,o as i,ae as a}from"./chunks/framework.Cd-3tpCq.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"cinnamon/xlet-settings-ref.md","filePath":"cinnamon/xlet-settings-ref.md"}'),n={name:"cinnamon/xlet-settings-ref.md"};function d(l,e,s,c,r,h){return i(),t("div",null,e[0]||(e[0]=[a(`<h2 id="applet-desklet-and-extension-settings-reference" tabindex="-1">Applet, desklet and extension settings reference <a class="header-anchor" href="#applet-desklet-and-extension-settings-reference" aria-label="Permalink to &quot;Applet, desklet and extension settings reference&quot;">​</a></h2><p>This is the reference for the settings API.</p><h3 id="widget-types-and-required-fields" tabindex="-1">Widget types and required fields <a class="header-anchor" href="#widget-types-and-required-fields" aria-label="Permalink to &quot;Widget types and required fields&quot;">​</a></h3><h4 id="checkbox" tabindex="-1">checkbox <a class="header-anchor" href="#checkbox" aria-label="Permalink to &quot;checkbox&quot;">​</a></h4><ul><li><code>type</code>: should be <code>checkbox</code></li><li><code>default</code>: <code>true</code> or <code>false</code> (no quotes)</li><li><code>description</code>: String describing the setting</li></ul><p>A simple checkbox that controls a <code>boolean</code> type value</p><h4 id="entry" tabindex="-1">entry <a class="header-anchor" href="#entry" aria-label="Permalink to &quot;entry&quot;">​</a></h4><ul><li><code>type</code>: should be <code>entry</code></li><li><code>default</code>: default string value</li><li><code>description</code>: String describing the setting</li></ul><p>A text entry field that stores a <code>string</code></p><h4 id="colorchooser" tabindex="-1">colorchooser <a class="header-anchor" href="#colorchooser" aria-label="Permalink to &quot;colorchooser&quot;">​</a></h4><ul><li><code>type</code>: should be <code>colorchooser</code></li><li><code>default</code>: default color string - can be <code>&quot;red&quot;</code> or <code>&quot;rgba(x,x,x,x)&quot;</code>, etc...</li><li><code>description</code>: String describing the setting</li></ul><p>A Color button that lets you choose a RGBA color code as a <code>string</code></p><h4 id="keybinding" tabindex="-1">keybinding <a class="header-anchor" href="#keybinding" aria-label="Permalink to &quot;keybinding&quot;">​</a></h4><ul><li><code>type</code>: should be <code>keybinding</code></li><li><code>default</code>: default keybinding string - i.e. <code>&amp;lt;Control&amp;gt;F8</code> or other string parseable by gtk_accelerator_parse.</li><li><code>description</code>: String describing the setting</li></ul><p>An input that allows you to select a keybinding for an action.</p><h4 id="radiogroup" tabindex="-1">radiogroup <a class="header-anchor" href="#radiogroup" aria-label="Permalink to &quot;radiogroup&quot;">​</a></h4><ul><li><code>type</code>: should be <code>radiogroup</code></li><li><code>default</code>: default value from the list of options, or it can be a custom value if <code>custom</code> is defined</li><li><code>description</code>: String describing the setting</li><li><code>options</code>: node of desc:val pair options, where desc is the displayed option name, val is the stored value</li></ul><p>A group of radio buttons whose description and values are defined by <code>options</code> in <code>description:value</code> pairs. Values may be <code>string</code> or <code>number</code>. also have a value of <code>custom</code>, and a text entry will be provided next to that option, to allow entering a custom value. Options might be:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;options&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Option 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;this value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Option 2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;that value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;Option 3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;other value&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="filechooser" tabindex="-1">filechooser <a class="header-anchor" href="#filechooser" aria-label="Permalink to &quot;filechooser&quot;">​</a></h4><ul><li><code>type</code>: should be <code>filechooser</code></li><li><code>description</code>: String describing the setting</li><li><code>default</code>: Default filename to use</li><li><code>select-dir</code>: (optional) true or false, or leave off entirely. Forces directory selection.</li></ul><p>Opens a file picker dialog to allow you to choose a filename. If <code>select-dir</code> is <code>true</code>, it will only allow directories to be selected. Stores as a <code>string</code>.</p><h4 id="iconfilechooser" tabindex="-1">iconfilechooser <a class="header-anchor" href="#iconfilechooser" aria-label="Permalink to &quot;iconfilechooser&quot;">​</a></h4><ul><li><code>type</code>: should be <code>iconfilechooser</code></li><li><code>description</code>: String describing the setting</li><li><code>default</code>: default icon path or icon name to use</li></ul><p>Provides a preview button and text entry field. You can open a file dialog to pick an image-type file, or enter a registered icon name in the text field. Stores as a <code>string</code>.</p><h4 id="combobox" tabindex="-1">combobox <a class="header-anchor" href="#combobox" aria-label="Permalink to &quot;combobox&quot;">​</a></h4><ul><li><code>type</code>: should be <code>combobox</code></li><li><code>default</code>: default value to set</li><li><code>description</code>: String describing the setting</li><li><code>options</code>: node of desc:val pair options, where desc is the displayed option name, val is the stored value</li></ul><p>Provides a dropdown list from which you can select from <code>description:value</code> pairs defined by <code>options</code>. The values can be <code>string</code>, <code>number</code>, or <code>boolean</code>.</p><h4 id="spinbutton" tabindex="-1">spinbutton <a class="header-anchor" href="#spinbutton" aria-label="Permalink to &quot;spinbutton&quot;">​</a></h4><ul><li><code>type</code>: should be <code>spinbutton</code></li><li><code>default</code>: default value to use - int or leading</li><li><code>min</code>: minimum value</li><li><code>max</code>: maximum value</li><li><code>units</code>: String describing what the number is a unit of (pixels, bytes, etc..)</li><li><code>step</code>: adjustment amount</li><li><code>description</code>: String describing the setting</li></ul><p>Provides a spin button and entry for changing setting a <code>number</code> value. This can be integer or floating point format. For floating point, all values must have leading 0&#39;s.</p><h4 id="scale" tabindex="-1">scale <a class="header-anchor" href="#scale" aria-label="Permalink to &quot;scale&quot;">​</a></h4><ul><li><code>type</code>: should be <code>scale</code></li><li><code>default</code>: default value to use - int or leading</li><li><code>min</code>: minimum value</li><li><code>max</code>: maximum value</li><li><code>step</code>: adjustment amount</li><li><code>description</code>: String describing the setting</li></ul><p>Provides a scale widget to allow you to pick a <code>number</code> value between min and max, by step amount. Integer or floating point numbers can be used. For floating point, all values must have leading 0&#39;s.</p><h4 id="generic" tabindex="-1">generic <a class="header-anchor" href="#generic" aria-label="Permalink to &quot;generic&quot;">​</a></h4><ul><li><code>type</code>: should be <code>generic</code></li><li><code>default</code>: default value</li></ul><p>A generic storage object for any type of value. This is generally intended for internal settings that won&#39;t be adjusted by the user. For example, a history, or most recent command. There is no corresponding widget for it in Cinnamon Settings.</p><h4 id="header" tabindex="-1">header <a class="header-anchor" href="#header" aria-label="Permalink to &quot;header&quot;">​</a></h4><ul><li><code>type</code>: should be <code>header</code></li><li><code>description</code>: String to display as a bold header</li></ul><p>A <em>non-setting</em> widget, this provides a bold-faced label for assisting in organizing your settings</p><h4 id="separator" tabindex="-1">separator <a class="header-anchor" href="#separator" aria-label="Permalink to &quot;separator&quot;">​</a></h4><ul><li><code>type</code>: should be <code>separator</code></li></ul><p>A <em>non-setting</em> widget, this draws a horizontal separator for assisting in organizing your settings</p><h4 id="button" tabindex="-1">button <a class="header-anchor" href="#button" aria-label="Permalink to &quot;button&quot;">​</a></h4><ul><li><code>type</code>: should be <code>button</code></li><li><code>description</code>: Label for the button</li><li><code>callback</code>: string of callback method name (no &quot;this&quot;, just &quot;myFunc&quot;)</li></ul><p>A <em>non-setting</em> widget, this provides a button, which, when clicked, activates the <code>callback</code> method in your applet. Note: the callback value should be a string of the method name only. For instance, to call <code>this.myCallback()</code>, you would put <code>myCallback</code> for the callback value.</p><h4 id="additional-setting-options" tabindex="-1">Additional Setting Options <a class="header-anchor" href="#additional-setting-options" aria-label="Permalink to &quot;Additional Setting Options&quot;">​</a></h4><p>These fields can be added to any widget:</p><ul><li><code>indent: true</code>: Indent the widget in the settings page to help with organizing your layout.</li><li><code>dependency: &quot;&lt;key&gt;&quot;</code>: where <code>&lt;key&gt;</code> is the name of a <code>checkbox</code> or <code>combobox</code> setting. If it is a checkbox and that checkbox setting is un-checked, this setting will be hidden. If it is a combobox, you need to state an option of this combobox too, e.g. <code>&quot;type=http&quot;</code>. Your setting will only be visible if the given option is selected in the combobox. The checkbox/combobox must occur <em>before</em> the setting that depends on it.</li><li><code>tooltip</code>: Adds a popup tooltip to the widget</li></ul><h4 id="signals" tabindex="-1">Signals <a class="header-anchor" href="#signals" aria-label="Permalink to &quot;Signals&quot;">​</a></h4><h4 id="settings-changed" tabindex="-1">settings-changed <a class="header-anchor" href="#settings-changed" aria-label="Permalink to &quot;settings-changed&quot;">​</a></h4><p>Signal when the underlying config file has changed and the in-memory values have been updated.</p><h4 id="changed-lt-key-gt" tabindex="-1">changed::&lt;key&gt; <a class="header-anchor" href="#changed-lt-key-gt" aria-label="Permalink to &quot;changed::&amp;lt;key&amp;gt;&quot;">​</a></h4><p>Signals when <code>key</code> has changed in the configuration file. Use this in conjunction with <code>getValue</code> if you want to handle your own updating in a more traditional way (like gsettings).</p><p>The callback function will be called with three paramenters: <code>settingProvider, oldval, newval</code>, which are, respectively, the settings object (which you usually don&#39;t need), the original value and the updated value.</p><h3 id="additional-options-in-metadata-json" tabindex="-1">Additional options in metadata.json <a class="header-anchor" href="#additional-options-in-metadata-json" aria-label="Permalink to &quot;Additional options in metadata.json&quot;">​</a></h3><p>You can add the following items to <code>metadata.json</code> to affect how the settings are presented to the user:</p><ul><li><code>hide-configuration</code>: Hides the configure button in Cinnamon Settings. Set to <code>true</code> if you are using only <code>generic</code>-type settings that should be hidden from the user. This is not a mandatory key. Omitting it will allow the configuration button to hide or display depending on whether you are utilizing the settings API or not.</li><li><code>external-configuration-app</code>: Allows you to define an external settings app to use instead of the built-in settings GUI. This should be a <code>string</code> with the name of your executable settings app (path relative to the applet&#39;s install directory). Note, this key can be overridden by the <code>hide-configuration</code> key. This is not a mandatory key. Omitting it will allow the configuration button to hide or display depending on whether you are utilizing the settings API or not.</li></ul>`,58)]))}const g=o(n,[["render",d]]);export{p as __pageData,g as default};
